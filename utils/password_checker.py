#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
密码强度检查工具
用于检查密码短语(passphrase)的强度，提供安全建议
"""

import re
import math
from typing import Dict, List, Tuple


class 密码强度检查器:
    """密码强度检查器类，用于评估密码的安全性"""
    
    # 常见密码列表（示例）
    常见密码 = [
        "password", "123456", "qwerty", "admin", "welcome",
        "password123", "abc123", "letmein", "monkey", "1234567890",
        "000000", "123123", "123321", "111111", "12345678",
        "654321", "987654321", "qwertyuiop", "mypassword", "password1",
        "123qwe", "zxcvbn", "asdfgh", "qazwsx", "1q2w3e4r",
        "qwerty123", "1q2w3e", "123456789", "qwerty1", "1234qwer",
        "88888888", "11111111", "12344321", "147258369", "987654",
        "qwer1234", "159753", "121212", "iloveyou", "222222",
        "qwe123", "qweasd", "999999", "1234567", "666666",
        "888888", "555555", "54321", "qwert", "12345",
        "112233", "741852963", "123654", "abcd1234", "qwertyui",
        "asdf", "753951", "0123456789", "zxcvbnm", "1234"
    ]
    
    # 中文常见密码
    中文常见密码 = [
        "密码", "我爱你", "你好", "测试", "管理员",
        "123456", "abcd1234", "admin123", "root123", "系统",
        "默认密码", "用户名", "用户", "administrator", "administrator123",
        "qwerty", "password", "123abc", "abc123", "123qwe",
        "qwe123", "123456789", "12345678", "111111", "000000"
    ]
    
    @staticmethod
    def 检查密码强度(密码: str) -> Dict:
        """
        检查密码强度并返回评分和建议
        
        参数:
            密码: 要检查的密码
            
        返回:
            包含评分和建议的字典
        """
        if not 密码:
            return {
                "分数": 0,
                "强度": "极弱",
                "颜色": "红色",
                "建议": ["密码不能为空"],
                "详情": {}
            }
        
        # 初始化评分和详情
        分数 = 0
        详情 = {}
        建议 = []
        
        # 检查长度
        长度 = len(密码)
        if 长度 < 8:
            长度分数 = 0
            建议.append("密码长度应至少为8个字符")
        elif 长度 < 12:
            长度分数 = 10
            建议.append("建议使用12个或更多字符的密码")
        elif 长度 < 16:
            长度分数 = 20
        else:
            长度分数 = 30
        
        分数 += 长度分数
        详情["长度"] = {"分数": 长度分数, "值": 长度}
        
        # 检查复杂度
        有小写字母 = bool(re.search(r'[a-z]', 密码))
        有大写字母 = bool(re.search(r'[A-Z]', 密码))
        有数字 = bool(re.search(r'\d', 密码))
        有特殊字符 = bool(re.search(r'[^a-zA-Z0-9\s]', 密码))
        
        复杂度分数 = 0
        if 有小写字母:
            复杂度分数 += 5
        else:
            建议.append("添加小写字母可以增强密码强度")
            
        if 有大写字母:
            复杂度分数 += 5
        else:
            建议.append("添加大写字母可以增强密码强度")
            
        if 有数字:
            复杂度分数 += 5
        else:
            建议.append("添加数字可以增强密码强度")
            
        if 有特殊字符:
            复杂度分数 += 10
        else:
            建议.append("添加特殊字符（如 !@#$%^&*）可以增强密码强度")
        
        分数 += 复杂度分数
        详情["复杂度"] = {
            "分数": 复杂度分数,
            "小写字母": 有小写字母,
            "大写字母": 有大写字母,
            "数字": 有数字,
            "特殊字符": 有特殊字符
        }
        
        # 检查重复模式
        重复模式 = 密码强度检查器._检查重复模式(密码)
        if 重复模式["存在"]:
            分数 -= 重复模式["惩罚"]
            建议.append(f"避免使用重复的字符或模式（如'{重复模式['模式']}'）")
        
        详情["重复模式"] = 重复模式
        
        # 检查序列模式
        序列模式 = 密码强度检查器._检查序列模式(密码)
        if 序列模式["存在"]:
            分数 -= 序列模式["惩罚"]
            建议.append(f"避免使用连续的字符序列（如'{序列模式['模式']}'）")
        
        详情["序列模式"] = 序列模式
        
        # 检查常见密码
        if 密码.lower() in 密码强度检查器.常见密码 or 密码 in 密码强度检查器.中文常见密码:
            分数 = 0
            建议 = ["这是一个非常常见的密码，极易被猜测。请使用更独特的密码。"]
        
        # 计算熵值（信息熵）
        熵值 = 密码强度检查器._计算密码熵(密码)
        熵分数 = min(25, int(熵值 / 4))  # 最高25分
        分数 += 熵分数
        详情["熵值"] = {"分数": 熵分数, "值": 熵值}
        
        # 确保分数在0-100之间
        分数 = max(0, min(100, 分数))
        
        # 确定强度级别
        if 分数 < 20:
            强度 = "极弱"
            颜色 = "红色"
        elif 分数 < 40:
            强度 = "弱"
            颜色 = "橙色"
        elif 分数 < 60:
            强度 = "中等"
            颜色 = "黄色"
        elif 分数 < 80:
            强度 = "强"
            颜色 = "蓝色"
        else:
            强度 = "极强"
            颜色 = "绿色"
        
        # 如果没有具体建议，添加一般性建议
        if not 建议 and 分数 < 80:
            建议.append("尝试使用更长、更复杂的密码，包含大小写字母、数字和特殊字符")
        
        return {
            "分数": 分数,
            "强度": 强度,
            "颜色": 颜色,
            "建议": 建议,
            "详情": 详情
        }
    
    @staticmethod
    def _检查重复模式(密码: str) -> Dict:
        """检查密码中的重复模式"""
        结果 = {"存在": False, "惩罚": 0, "模式": ""}
        
        # 检查连续重复字符
        for i in range(len(密码) - 2):
            if 密码[i] == 密码[i+1] == 密码[i+2]:
                结果["存在"] = True
                结果["惩罚"] = 10
                结果["模式"] = 密码[i] * 3
                return 结果
        
        # 检查重复的双字符
        for i in range(len(密码) - 3):
            if 密码[i:i+2] == 密码[i+2:i+4]:
                结果["存在"] = True
                结果["惩罚"] = 5
                结果["模式"] = 密码[i:i+2] * 2
                return 结果
        
        return 结果
    
    @staticmethod
    def _检查序列模式(密码: str) -> Dict:
        """检查密码中的序列模式"""
        结果 = {"存在": False, "惩罚": 0, "模式": ""}
        
        # 常见序列
        序列 = [
            "abcdefghijklmnopqrstuvwxyz",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "0123456789",
            "qwertyuiop",
            "asdfghjkl",
            "zxcvbnm"
        ]
        
        for s in 序列:
            for i in range(len(s) - 2):
                模式 = s[i:i+3]
                if 模式 in 密码.lower():
                    结果["存在"] = True
                    结果["惩罚"] = 10
                    结果["模式"] = 模式
                    return 结果
        
        return 结果
    
    @staticmethod
    def _计算密码熵(密码: str) -> float:
        """计算密码的信息熵"""
        if not 密码:
            return 0.0
        
        # 计算字符频率
        字符频率 = {}
        for 字符 in 密码:
            if 字符 in 字符频率:
                字符频率[字符] += 1
            else:
                字符频率[字符] = 1
        
        # 计算熵
        熵 = 0.0
        长度 = len(密码)
        for 频率 in 字符频率.values():
            概率 = 频率 / 长度
            熵 -= 概率 * math.log2(概率)
        
        # 调整熵值，考虑密码长度
        调整熵 = 熵 * 长度
        
        return 调整熵
    
    @staticmethod
    def 生成密码建议() -> List[str]:
        """生成强密码的建议"""
        return [
            "使用至少16个字符的密码",
            "混合使用大写字母、小写字母、数字和特殊字符",
            "避免使用个人信息（如生日、姓名、宠物名等）",
            "避免使用连续字符（如'123456'或'abcdef'）",
            "避免使用键盘上连续的字符（如'qwerty'）",
            "考虑使用密码短语（多个单词组合）而不是单个单词",
            "对不同服务使用不同的密码",
            "定期更换密码",
            "考虑使用密码管理器来生成和存储复杂密码"
        ]
    
    @staticmethod
    def 格式化输出密码强度(结果: Dict) -> str:
        """格式化输出密码强度检查结果"""
        输出 = f"\n===== 密码强度检查结果 =====\n"
        输出 += f"强度: {结果['强度']} ({结果['分数']}/100)\n"
        
        if 结果['建议']:
            输出 += "\n建议:\n"
            for 建议 in 结果['建议']:
                输出 += f"- {建议}\n"
        
        return 输出


# 测试代码
if __name__ == "__main__":
    测试密码 = "password123"
    结果 = 密码强度检查器.检查密码强度(测试密码)
    print(密码强度检查器.格式化输出密码强度(结果))
    
    print("\n强密码建议:")
    for 建议 in 密码强度检查器.生成密码建议():
        print(f"- {建议}")